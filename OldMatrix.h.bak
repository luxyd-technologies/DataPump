#pragma once

#ifndef MATRIX_MATMUL_H
#define MATRIX_MATMUL_H

// Matrix structure and constants
//struct Matrix;
#define MATX_OP_FAILURE 0
#define MATX_OP_INCOMPATIBLE 1
#define MATX_OP_SUCCESS 9

#define MATRIX_TYPE_OPERAND 0
#define MATRIX_TYPE_RESULT 1

#define MAX_OPERATION_COUNT 10
#define MAX_MATRIX_ROW_COUNT 1000
#define MAX_MATRIX_COL_COUNT 1000


#define MAX_MATRIX_ROWS		40
#define MAX_MATRIX_COLS		40

//struct MatrixData {
//
//    unsigned short int  ushort_data[MAX_MATRIX_ROWS][MAX_MATRIX_COLS];   // Pointer to an array of unsigned short integers
//    unsigned int*       uint_data[MAX_MATRIX_ROWS][MAX_MATRIX_COLS];          // Pointer to an array of unsigned integers
//    
//};

struct OldMatrixNew {
    unsigned short int matrix_id; // Unique identifier for the matrix
    unsigned short int operand_id; // Identifier for the operand
    unsigned short int rows;
    unsigned short int cols;
	MatrixData         data; // MatrixData structure containing the matrix data
    unsigned int       matrix_type; // default to operand type
};

struct OldMatrix {
    unsigned short int matrix_id; // Unique identifier for the matrix
    unsigned short int operand_id; // Identifier for the operand
    unsigned short int rows;
    unsigned short int cols;
    unsigned short int* ushort_data;
    unsigned int* uint_data;
    unsigned int matrix_type; // default to operand type
};

struct OperationNew {
    unsigned int operation_id; // Unique identifier for the operation
    OldMatrixNew operand1;   // Pointer to the first operand matrix
    OldMatrixNew operand2;   // Pointer to the second operand matrix
    OldMatrixNew result;     // Pointer to the result matrix
};

struct Operation {
    unsigned int operation_id; // Unique identifier for the operation
    OldMatrix* operand1;   // Pointer to the first operand matrix
    OldMatrix* operand2;   // Pointer to the second operand matrix
    OldMatrix* result;     // Pointer to the result matrix
};

// Function prototypes
Operation*      create_operation_new(Operation* _operation, unsigned int _operation_id, OldMatrix* _matrix_operand1, OldMatrix* _matrix_operand2, OldMatrix* _matrix_result);
Operation*		create_operation(unsigned int _operation_id, OldMatrix* _matrix_operand1, OldMatrix* _matrix_operand2, OldMatrix* _matrix_result);
void            operation_print_info(Operation* op);
int             save_operation_to_file(const char* filename, Operation* _operation);
void            free_operation(Operation* op);

OldMatrix*         generate_matrix(int _matrix_id, int _operand_id, int _rows, int _cols, int _matrix_type);
OldMatrix*         create_matrix(int _matrix_id, int _operand_id, int _rows, int _cols, int _matrix_type);
unsigned short  matrix_get_ushort(const OldMatrix* m, int row, int col);
unsigned int    matrix_get_uint(const OldMatrix* m, int row, int col);
void            matrix_set_ushort(OldMatrix* m, int row, int col, unsigned short int value);
void            matrix_set_uint(OldMatrix* m, int row, int col, unsigned int value);
void            matrix_print_info(OldMatrix* m);
int             save_matrix_tofile(FILE* file, OldMatrix* _matrix, int _operation_id, int operand_no);
void            free_matrix(OldMatrix* m);

unsigned short	generate_random_ushort(void);
unsigned short	init_matrix_operand1(OldMatrix* mat);
unsigned short	init_matrix_operand2(OldMatrix* mat);
unsigned int    multiply_matrices(OldMatrix* _matrix1, OldMatrix* _matrix2, OldMatrix* _matrix_result);

int             print_message(int message_type, char* message);



#endif